apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
    }
    buildTypes {
        each {
        }
    }
}

dependencies {
    compileOnly 'androidx.annotation:annotation:1.0.0'

    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.appcompat:appcompat:1.0.1'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
}

/* maven deploy + signing */
task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = 'javadoc'
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocsJar
    archives sourcesJar
}

apply plugin: 'io.codearte.nexus-staging'
nexusStaging {
    packageGroup = "com.seamlesspay"
}

group = 'com.seamlesspay.api'
uploadArchives {
    repositories {
        mavenDeployer {
            pom.setArtifactId 'core'

            pom.project {
                name 'core'
                groupId = 'com.seamlesspay.api'
                version = "${android.defaultConfig.versionName}"
                description 'Library containing shared components used across Seamlesspay Android SDKs.'
            }
        }
    }
}
